# -*- coding: utf-8 -*-


from slack_bolt import App
from loguru import logger
import threading
from daemons import pairs, week
from database.dao import meets, users
from database.interface import connector
from entities import user
from utils import config
from mysql.connector import pooling

config = config.load("../config.yml")
app = App(
    token=config["slack"]["otoken"],
    signing_secret=config["slack"]["sigSecret"],
)


#
# Bot flow
#
@app.action("flow_help")
def flow_help(body, ack, say):
    ack()
    say(
        text=f"TODO: Add some help info"
    )


@app.message("start")
def flow_0_start(message, say):
    say(
        blocks=[
            {
                "type": "section",
                "text": {
                    # TODO (asharov): rewrite
                    "type": "mrkdwn",
                    "text": "–ü—Ä–∏–≤–µ—Ç —á–µ–ª–æ–≤–µ–∫ (—Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–ø–∏—Å–∞–Ω!)üëã \n" \
                            "–ù–µ–¥–∞–≤–Ω–æ —è —É–∑–Ω–∞–ª –æ Random coffee challenge –∏ –ø–æ–Ω—è–ª - –æ–Ω –Ω—É–∂–µ–Ω.\n" \
                            "–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é —è –±—É–¥—É –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ç–µ–±–µ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ä–µ–¥–∏ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤." \
                            "–í—ã —Å –Ω–∏–º —É–≤–∏–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º—ã –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –∏ —Å–º–æ–∂–µ—Ç–µ —Å—Ä–∞–∑—É –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ (–≤ –æ—Ñ–∏—Å–µ, skype, zoom –∏ —Ç.–¥.).\n" \
                            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ? –¢–æ–≥–¥–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è!"
                },
                "accessory": {
                    "type": "image",
                    "image_url": "https://image.freepik.com/free-vector/cute-unicorn-vector-with-donut-cartoon_70350-110.jpg",
                    "alt_text": "cute donut"
                }
            },
            {
                "type": "actions",
                "elements": [
                    {
                        "type": "button",
                        "text": {
                            "type": "plain_text",
                            "emoji": True,
                            "text": "Join"
                        },
                        "style": "primary",
                        "action_id": "flow_1_start"
                    },
                    {
                        "type": "button",
                        "text": {
                            "type": "plain_text",
                            "emoji": True,
                            "text": "Help"
                        },
                        "action_id": "flow_help"
                    },
                    {
                        "type": "button",
                        "text": {
                            "type": "plain_text",
                            "emoji": True,
                            "text": "Cancel"
                        },
                        "style": "danger",
                        "action_id": "flow_0_cancel"
                    }
                ]
            }
        ],
        text=""
    )


@app.action("flow_1_start")
def flow_1_start(body, ack, say):
    uuser = user.User(username=body["user"]["username"], uid=body["user"]["id"])

    if users.is_new(connection, body["user"]["id"]):
        users.add(connection, uuser)

        ack()
        say(
            text=f"–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ",
            attachments=[
                {
                    "fallback": "Upgrade your Slack client to use messages like these.",
                    "color": "3AA3E3",
                    "attachment_type": "default",
                    "callback_id": "select_remote_1234",
                    "actions": [
                        {
                            "name": "Location",
                            "text": "You location",
                            "type": "select",

                            "options": [
                                {
                                    "text": "Saratov",
                                    "value": "saratov"
                                },
                                {
                                    "text": "St. Petersburg",
                                    "value": "spb"
                                },
                            ],
                        }
                    ]
                }
            ],
            blocks=[
                {
                    "type": "actions",
                    "elements": [
                        {
                            "type": "button",
                            "text": {
                                "type": "plain_text",
                                "emoji": True,
                                "text": "Done"
                            },
                            "style": "primary",
                            "action_id": "flow_2_start",
                            "value": "click_me_123"
                        }
                    ]
                }

            ]
        )
    else:
        flow_2_start(body, ack, say)


@app.action("flow_0_cancel")
def flow_1_cancel(body, ack, say):
    ack()
    say(
        text=f"TODO: flow_0_cancel"
    )


@app.action("flow_2_start")
def flow_2_start(body, ack, say):
    ack()
    say(
        text=f"TODO: flow_help"
    )


@app.action("flow_next_week_yes")
def flow_next_week_yes(body, ack, say):
    ack()
    say(
        text=f"–û—Ç–ª–∏—á–Ω–æ!üëç! –ù–∞–ø–∏—à—É —Ç–µ–±–µ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫."
    )

    # user.ready = True
    # users.set_ready(connection, user)


@app.action("flow_next_week_no")
def flow_next_week_no(body, ack, say):
    ack()
    say(
        text=f"–ü–µ—Ä–µ—Ä—ã–≤ –Ω—É–∂–µ–Ω –≤—Å–µ–≥–¥–∞, –ø–æ–Ω–∏–º–∞—é. –í–µ—Ä–Ω—É—Å—å –∫ —Ç–µ–±–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ"
    )

    # user.ready = False
    # users.set_ready(connection, user)


@app.action("flow_meet_was")
def flow_meet_was(body, ack, say):
    ack()
    say(
        text=f"TODO: flow_meet_was"
    )

    # TODO: do some calculation stuff


@app.action("flow_meet_was_not")
def flow_meet_was_not(body, ack, say):
    ack()
    say(
        text=f"TODO: flow_meet_was_not"
    )

    # TODO: do some calculation stuff


if __name__ == "__main__":
    connection_pool = pooling.MySQLConnectionPool(pool_name="default",
                                                  pool_size=5,
                                                  pool_reset_session=True,
                                                  host=config["database"]["host"],
                                                  port=config["database"]["port"],
                                                  database=config["database"]["db"],
                                                  user=config["database"]["username"],
                                                  password=config["database"]["password"]
                                                  )

    connector = connector.Connector(connection_pool)

    pairs = threading.Thread(target=pairs.create, args=(app.client, connection_pool, 5,))
    pairs.start()

    week = threading.Thread(target=week.care, args=(app.client, connection_pool, config, 5,))
    week.start()

    bot = threading.Thread(target=app.start(port=config["bot"]["port"]), args=())
    bot.start()

    pairs.join()
    week.join()
    bot.join()
